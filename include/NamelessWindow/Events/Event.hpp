/*!
 * @file Event.hpp
 * @author MZelriche
 * @date 2021-2022
 * @copyright MIT License
 *
 * @addtogroup Common Public API
 * @brief Documentation for public API that clients directly interact with.
 */
#pragma once

#include <string>
#include <variant>

#include "../NLSAPI.hpp"
#include "Key.hpp"

namespace NLSWIN {

/*! @ingroup Common */
/*! @headerfile "Events/Event.hpp" */
/*! Each application window is assigned one of these unique IDs. */
using WindowID = uint32_t;

/*! @ingroup Common */
/*! @headerfile "Events/Event.hpp" */
/*! Generated whenever the user interacts with a key on the keyboard. */
struct NLSWIN_API_PUBLIC KeyEvent {
   std::string keyName {"NULL"}; /*!< The human-readable name of the key that generated the event. */
   KeyCode code;                 /*!< Keycode information for the event. @see KeyCode */
   KeyPressType pressType {KeyPressType::UNKNOWN}; /*!< Whether this event was a press, release or repeat. */
   WindowID sourceWindow {0};                      /*!< The ID of the window that this event came from. */
};

/*! @ingroup Common */
/*! @headerfile "Events/Event.hpp" */
/*! Generated whenever the user pressed a keyboard key capable of producing a printable ASCII character. */
struct NLSWIN_API_PUBLIC CharacterEvent {
   char character;        /*!< The ASCII character that was pressed on the keyboard. */
   WindowID sourceWindow; /*!< The window that received this character. */
};

/*! @ingroup Common */
/*! @headerfile "Events/Event.hpp" */
/*! Generated whenever the user interacts with a mouse button
    while the cursor is within the client area of any application window. */
struct NLSWIN_API_PUBLIC MouseButtonEvent {
   ButtonValue button;    /*!< Which button was pressed. @see ButtonValue */
   ButtonPressType type;  /*!< Whether the event was a press or release. */
   float xPos;            /*!< The X pixel coordinate where the event was generated in the source window. */
   float yPos;            /*!< The Y pixel coordinate where the event was generated in the source window. */
   WindowID sourceWindow; /*!< The ID of the window that this event came from */
};

/*! @ingroup Common */
/*! @headerfile "Events/Event.hpp" */
/*! Generated by a RawMouse whenever the user interacts with a button of a specified mouse device. Raw
    events are captured globally, inside and outside of application windows.  */
struct NLSWIN_API_PUBLIC RawMouseButtonEvent {
   ButtonValue button;   /*!< Which button was pressed. @see ButtonValue */
   ButtonPressType type; /*!< Whether the event was a press or release. */
};

/*! @ingroup Common */
/*! @headerfile "Events/Event.hpp" */
/*! Generated whenever the user interacts with the scroll wheel on a mouse while the cursor is within the
    client area of any application window. */
struct NLSWIN_API_PUBLIC MouseScrollEvent {
   ScrollType scrollType; /*!< The direction the scroll wheel was scrolled in. @see ScrollType */
   float xPos;            /*!< The X pixel coordinate where the event was generated in the source window. */
   float yPos;            /*!< The Y pixel coordinate where the event was generated in the source window. */
   WindowID sourceWindow; /*!< The ID of the window that this event came from */
};

/*! @ingroup Common */
/*! @headerfile "Events/Event.hpp" */
/*! Generated by a RawMouse whenever the user interacts with the scroll wheel of a specified mouse device.
    Raw events are captured globally, inside and outside of application windows. */
struct NLSWIN_API_PUBLIC RawMouseScrollEvent {
   ScrollType scrollType; /*!< The direction the scroll wheel was scrolled in. @see ScrollType */
};

/*! @ingroup Common */
/*! @headerfile "Events/Event.hpp" */
/*! Generated whenever the user moves the cursor within the client area of any application window. */
struct NLSWIN_API_PUBLIC MouseMovementEvent {
   float newXPos;         /*!< The X pixel coordinate of the new location of the cursor. */
   float newYPos;         /*!< The Y pixel coordinate of the new location of the cursor. */
   WindowID sourceWindow; /*!< The ID of the window that this event came from */
};

/*! @brief Generated in response to the movement of a mouse device.
 *  @ingroup Common
 *  @headerfile "Events/Event.hpp"
 *
 *  Both Cursor and RawMouse can generate this event. When generated by the Cursor class, the delta movement
 *  of all connected physical mice is reported. When generated by the RawMouse class, delta movement of only
 *  one specified physical device is reported.
 */
struct NLSWIN_API_PUBLIC RawMouseDeltaMovementEvent {
   float deltaX; /*!< The raw unaccelerated delta change on the X axis.. */
   float deltaY; /*!< The raw unaccelerated delta change on the Y axis.. */
};

/*! @ingroup Common */
/*! @headerfile "Events/Event.hpp" */
/*! Generated whenever the cursor enters the client area of any application window. */
struct NLSWIN_API_PUBLIC MouseEnterEvent {
   float xPos;            /*!< The X coordinate where the cursor entered the client area. */
   float yPos;            /*!< The Y coordinate where the cursor entered the client area. */
   WindowID sourceWindow; /*!< The window the cursor entered. */
};

/*! @ingroup Common */
/*! @headerfile "Events/Event.hpp" */
/*! Generated whenever the cursor leaves the client area of any application window. */
struct NLSWIN_API_PUBLIC MouseLeaveEvent {
   WindowID sourceWindow; /*!< The window the cursor left. */
};

/*! @ingroup Common */
/*! @headerfile "Events/Event.hpp" */
/*! Generated whenever an application window receives focus. */
struct NLSWIN_API_PUBLIC WindowFocusedEvent {
   WindowID sourceWindow; /*!< The window that was focused. */
};

/*! @ingroup Common */
/*! @headerfile "Events/Event.hpp" */
/*! Generated whenever an application window loses focus. */
struct NLSWIN_API_PUBLIC WindowFocusLostEvent {
   WindowID sourceWindow; /*!< The window whose focus has just been lost. */
};

/*! @ingroup Common */
/*! @headerfile "Events/Event.hpp" */
/*! Generated whenever an application window is resized. */
struct NLSWIN_API_PUBLIC WindowResizeEvent {
   int newWidth;          /*!< The new width in pixels of the application window. */
   int newHeight;         /*!< The new height in pixels of the application window. */
   WindowID sourceWindow; /*!< The window that was resized. */
};

/*! @ingroup Common */
/*! @headerfile "Events/Event.hpp" */
/*! Generated whenever an application window is moved. */
struct NLSWIN_API_PUBLIC WindowRepositionEvent {
   int newX;              /*!< The X screen coordinate of the top-left corner of the client area. */
   int newY;              /*!< The Y screen coordinate of the top-left corner of the client area. */
   WindowID sourceWindow; /*!< The window that was moved. */
};

/*! Generic NLSWIN Event. */
/*! @ingroup Common */
/*! @headerfile "Events/Event.hpp" */
using Event = std::variant<std::monostate, KeyEvent, WindowFocusedEvent, WindowResizeEvent, MouseButtonEvent,
                           RawMouseButtonEvent, MouseScrollEvent, RawMouseScrollEvent, MouseMovementEvent,
                           MouseEnterEvent, MouseLeaveEvent, RawMouseDeltaMovementEvent,
                           WindowRepositionEvent, CharacterEvent, WindowFocusLostEvent>;

}  // namespace NLSWIN